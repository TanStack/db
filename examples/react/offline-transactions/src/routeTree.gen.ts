/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LocalstorageRouteImport } from './routes/localstorage'
import { Route as IndexeddbRouteImport } from './routes/indexeddb'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiTodosServerRouteImport } from './routes/api/todos'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api/users.$userId'
import { ServerRoute as ApiTodosTodoIdServerRouteImport } from './routes/api/todos.$todoId'

const rootServerRouteImport = createServerRootRoute()

const LocalstorageRoute = LocalstorageRouteImport.update({
  id: '/localstorage',
  path: '/localstorage',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexeddbRoute = IndexeddbRouteImport.update({
  id: '/indexeddb',
  path: '/indexeddb',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTodosServerRoute = ApiTodosServerRouteImport.update({
  id: '/api/todos',
  path: '/api/todos',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)
const ApiTodosTodoIdServerRoute = ApiTodosTodoIdServerRouteImport.update({
  id: '/$todoId',
  path: '/$todoId',
  getParentRoute: () => ApiTodosServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/indexeddb': typeof IndexeddbRoute
  '/localstorage': typeof LocalstorageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/indexeddb': typeof IndexeddbRoute
  '/localstorage': typeof LocalstorageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/indexeddb': typeof IndexeddbRoute
  '/localstorage': typeof LocalstorageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/indexeddb' | '/localstorage'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/indexeddb' | '/localstorage'
  id: '__root__' | '/' | '/indexeddb' | '/localstorage'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  IndexeddbRoute: typeof IndexeddbRoute
  LocalstorageRoute: typeof LocalstorageRoute
}
export interface FileServerRoutesByFullPath {
  '/api/todos': typeof ApiTodosServerRouteWithChildren
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/todos/$todoId': typeof ApiTodosTodoIdServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/todos': typeof ApiTodosServerRouteWithChildren
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/todos/$todoId': typeof ApiTodosTodoIdServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/todos': typeof ApiTodosServerRouteWithChildren
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/todos/$todoId': typeof ApiTodosTodoIdServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/todos'
    | '/api/users'
    | '/api/todos/$todoId'
    | '/api/users/$userId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/todos' | '/api/users' | '/api/todos/$todoId' | '/api/users/$userId'
  id:
    | '__root__'
    | '/api/todos'
    | '/api/users'
    | '/api/todos/$todoId'
    | '/api/users/$userId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTodosServerRoute: typeof ApiTodosServerRouteWithChildren
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/localstorage': {
      id: '/localstorage'
      path: '/localstorage'
      fullPath: '/localstorage'
      preLoaderRoute: typeof LocalstorageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/indexeddb': {
      id: '/indexeddb'
      path: '/indexeddb'
      fullPath: '/indexeddb'
      preLoaderRoute: typeof IndexeddbRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/todos': {
      id: '/api/todos'
      path: '/api/todos'
      fullPath: '/api/todos'
      preLoaderRoute: typeof ApiTodosServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
    '/api/todos/$todoId': {
      id: '/api/todos/$todoId'
      path: '/$todoId'
      fullPath: '/api/todos/$todoId'
      preLoaderRoute: typeof ApiTodosTodoIdServerRouteImport
      parentRoute: typeof ApiTodosServerRoute
    }
  }
}

interface ApiTodosServerRouteChildren {
  ApiTodosTodoIdServerRoute: typeof ApiTodosTodoIdServerRoute
}

const ApiTodosServerRouteChildren: ApiTodosServerRouteChildren = {
  ApiTodosTodoIdServerRoute: ApiTodosTodoIdServerRoute,
}

const ApiTodosServerRouteWithChildren = ApiTodosServerRoute._addFileChildren(
  ApiTodosServerRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  IndexeddbRoute: IndexeddbRoute,
  LocalstorageRoute: LocalstorageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTodosServerRoute: ApiTodosServerRouteWithChildren,
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
