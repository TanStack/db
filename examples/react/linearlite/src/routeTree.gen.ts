/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedIssuesRouteImport } from './routes/_authenticated/issues'
import { Route as AuthenticatedBoardRouteImport } from './routes/_authenticated/board'
import { Route as AuthenticatedIssueIssueIdRouteImport } from './routes/_authenticated/issue/$issueId'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIssuesRoute = AuthenticatedIssuesRouteImport.update({
  id: '/issues',
  path: '/issues',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedBoardRoute = AuthenticatedBoardRouteImport.update({
  id: '/board',
  path: '/board',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedIssueIssueIdRoute =
  AuthenticatedIssueIssueIdRouteImport.update({
    id: '/issue/$issueId',
    path: '/issue/$issueId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/board': typeof AuthenticatedBoardRoute
  '/issues': typeof AuthenticatedIssuesRoute
  '/issue/$issueId': typeof AuthenticatedIssueIssueIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/board': typeof AuthenticatedBoardRoute
  '/issues': typeof AuthenticatedIssuesRoute
  '/issue/$issueId': typeof AuthenticatedIssueIssueIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/board': typeof AuthenticatedBoardRoute
  '/_authenticated/issues': typeof AuthenticatedIssuesRoute
  '/_authenticated/issue/$issueId': typeof AuthenticatedIssueIssueIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/board' | '/issues' | '/issue/$issueId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/board' | '/issues' | '/issue/$issueId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/board'
    | '/_authenticated/issues'
    | '/_authenticated/issue/$issueId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/issues': {
      id: '/_authenticated/issues'
      path: '/issues'
      fullPath: '/issues'
      preLoaderRoute: typeof AuthenticatedIssuesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/board': {
      id: '/_authenticated/board'
      path: '/board'
      fullPath: '/board'
      preLoaderRoute: typeof AuthenticatedBoardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/issue/$issueId': {
      id: '/_authenticated/issue/$issueId'
      path: '/issue/$issueId'
      fullPath: '/issue/$issueId'
      preLoaderRoute: typeof AuthenticatedIssueIssueIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedBoardRoute: typeof AuthenticatedBoardRoute
  AuthenticatedIssuesRoute: typeof AuthenticatedIssuesRoute
  AuthenticatedIssueIssueIdRoute: typeof AuthenticatedIssueIssueIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedBoardRoute: AuthenticatedBoardRoute,
  AuthenticatedIssuesRoute: AuthenticatedIssuesRoute,
  AuthenticatedIssueIssueIdRoute: AuthenticatedIssueIssueIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './main.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
